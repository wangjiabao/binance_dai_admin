// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.7
// source: api/userdata/v1/userdata.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Userdata_GetUserOrders_FullMethodName  = "/api.userdata.v1.Userdata/GetUserOrders"
	Userdata_PullUserIncome_FullMethodName = "/api.userdata.v1.Userdata/PullUserIncome"
	Userdata_GetUsers_FullMethodName       = "/api.userdata.v1.Userdata/GetUsers"
	Userdata_GetUsersIncome_FullMethodName = "/api.userdata.v1.Userdata/GetUsersIncome"
	Userdata_UpdateUserNum_FullMethodName  = "/api.userdata.v1.Userdata/UpdateUserNum"
	Userdata_GetNum_FullMethodName         = "/api.userdata.v1.Userdata/GetNum"
	Userdata_UpdateNum_FullMethodName      = "/api.userdata.v1.Userdata/UpdateNum"
)

// UserdataClient is the client API for Userdata service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserdataClient interface {
	GetUserOrders(ctx context.Context, in *GetUserOrdersRequest, opts ...grpc.CallOption) (*GetUserOrdersReply, error)
	PullUserIncome(ctx context.Context, in *PullUserIncomeRequest, opts ...grpc.CallOption) (*PullUserIncomeReply, error)
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersReply, error)
	GetUsersIncome(ctx context.Context, in *GetUsersIncomeRequest, opts ...grpc.CallOption) (*GetUsersIncomeReply, error)
	UpdateUserNum(ctx context.Context, in *UpdateUserNumRequest, opts ...grpc.CallOption) (*UpdateUserNumReply, error)
	GetNum(ctx context.Context, in *GetNumRequest, opts ...grpc.CallOption) (*GetNumReply, error)
	UpdateNum(ctx context.Context, in *UpdateNumRequest, opts ...grpc.CallOption) (*UpdateNumReply, error)
}

type userdataClient struct {
	cc grpc.ClientConnInterface
}

func NewUserdataClient(cc grpc.ClientConnInterface) UserdataClient {
	return &userdataClient{cc}
}

func (c *userdataClient) GetUserOrders(ctx context.Context, in *GetUserOrdersRequest, opts ...grpc.CallOption) (*GetUserOrdersReply, error) {
	out := new(GetUserOrdersReply)
	err := c.cc.Invoke(ctx, Userdata_GetUserOrders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userdataClient) PullUserIncome(ctx context.Context, in *PullUserIncomeRequest, opts ...grpc.CallOption) (*PullUserIncomeReply, error) {
	out := new(PullUserIncomeReply)
	err := c.cc.Invoke(ctx, Userdata_PullUserIncome_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userdataClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersReply, error) {
	out := new(GetUsersReply)
	err := c.cc.Invoke(ctx, Userdata_GetUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userdataClient) GetUsersIncome(ctx context.Context, in *GetUsersIncomeRequest, opts ...grpc.CallOption) (*GetUsersIncomeReply, error) {
	out := new(GetUsersIncomeReply)
	err := c.cc.Invoke(ctx, Userdata_GetUsersIncome_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userdataClient) UpdateUserNum(ctx context.Context, in *UpdateUserNumRequest, opts ...grpc.CallOption) (*UpdateUserNumReply, error) {
	out := new(UpdateUserNumReply)
	err := c.cc.Invoke(ctx, Userdata_UpdateUserNum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userdataClient) GetNum(ctx context.Context, in *GetNumRequest, opts ...grpc.CallOption) (*GetNumReply, error) {
	out := new(GetNumReply)
	err := c.cc.Invoke(ctx, Userdata_GetNum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userdataClient) UpdateNum(ctx context.Context, in *UpdateNumRequest, opts ...grpc.CallOption) (*UpdateNumReply, error) {
	out := new(UpdateNumReply)
	err := c.cc.Invoke(ctx, Userdata_UpdateNum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserdataServer is the server API for Userdata service.
// All implementations must embed UnimplementedUserdataServer
// for forward compatibility
type UserdataServer interface {
	GetUserOrders(context.Context, *GetUserOrdersRequest) (*GetUserOrdersReply, error)
	PullUserIncome(context.Context, *PullUserIncomeRequest) (*PullUserIncomeReply, error)
	GetUsers(context.Context, *GetUsersRequest) (*GetUsersReply, error)
	GetUsersIncome(context.Context, *GetUsersIncomeRequest) (*GetUsersIncomeReply, error)
	UpdateUserNum(context.Context, *UpdateUserNumRequest) (*UpdateUserNumReply, error)
	GetNum(context.Context, *GetNumRequest) (*GetNumReply, error)
	UpdateNum(context.Context, *UpdateNumRequest) (*UpdateNumReply, error)
	mustEmbedUnimplementedUserdataServer()
}

// UnimplementedUserdataServer must be embedded to have forward compatible implementations.
type UnimplementedUserdataServer struct {
}

func (UnimplementedUserdataServer) GetUserOrders(context.Context, *GetUserOrdersRequest) (*GetUserOrdersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserOrders not implemented")
}
func (UnimplementedUserdataServer) PullUserIncome(context.Context, *PullUserIncomeRequest) (*PullUserIncomeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullUserIncome not implemented")
}
func (UnimplementedUserdataServer) GetUsers(context.Context, *GetUsersRequest) (*GetUsersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedUserdataServer) GetUsersIncome(context.Context, *GetUsersIncomeRequest) (*GetUsersIncomeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersIncome not implemented")
}
func (UnimplementedUserdataServer) UpdateUserNum(context.Context, *UpdateUserNumRequest) (*UpdateUserNumReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserNum not implemented")
}
func (UnimplementedUserdataServer) GetNum(context.Context, *GetNumRequest) (*GetNumReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNum not implemented")
}
func (UnimplementedUserdataServer) UpdateNum(context.Context, *UpdateNumRequest) (*UpdateNumReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNum not implemented")
}
func (UnimplementedUserdataServer) mustEmbedUnimplementedUserdataServer() {}

// UnsafeUserdataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserdataServer will
// result in compilation errors.
type UnsafeUserdataServer interface {
	mustEmbedUnimplementedUserdataServer()
}

func RegisterUserdataServer(s grpc.ServiceRegistrar, srv UserdataServer) {
	s.RegisterService(&Userdata_ServiceDesc, srv)
}

func _Userdata_GetUserOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserdataServer).GetUserOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Userdata_GetUserOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserdataServer).GetUserOrders(ctx, req.(*GetUserOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userdata_PullUserIncome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullUserIncomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserdataServer).PullUserIncome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Userdata_PullUserIncome_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserdataServer).PullUserIncome(ctx, req.(*PullUserIncomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userdata_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserdataServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Userdata_GetUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserdataServer).GetUsers(ctx, req.(*GetUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userdata_GetUsersIncome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersIncomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserdataServer).GetUsersIncome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Userdata_GetUsersIncome_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserdataServer).GetUsersIncome(ctx, req.(*GetUsersIncomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userdata_UpdateUserNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserNumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserdataServer).UpdateUserNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Userdata_UpdateUserNum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserdataServer).UpdateUserNum(ctx, req.(*UpdateUserNumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userdata_GetNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserdataServer).GetNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Userdata_GetNum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserdataServer).GetNum(ctx, req.(*GetNumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userdata_UpdateNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserdataServer).UpdateNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Userdata_UpdateNum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserdataServer).UpdateNum(ctx, req.(*UpdateNumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Userdata_ServiceDesc is the grpc.ServiceDesc for Userdata service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Userdata_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.userdata.v1.Userdata",
	HandlerType: (*UserdataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserOrders",
			Handler:    _Userdata_GetUserOrders_Handler,
		},
		{
			MethodName: "PullUserIncome",
			Handler:    _Userdata_PullUserIncome_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _Userdata_GetUsers_Handler,
		},
		{
			MethodName: "GetUsersIncome",
			Handler:    _Userdata_GetUsersIncome_Handler,
		},
		{
			MethodName: "UpdateUserNum",
			Handler:    _Userdata_UpdateUserNum_Handler,
		},
		{
			MethodName: "GetNum",
			Handler:    _Userdata_GetNum_Handler,
		},
		{
			MethodName: "UpdateNum",
			Handler:    _Userdata_UpdateNum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/userdata/v1/userdata.proto",
}
